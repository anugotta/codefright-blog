<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on &lt;/&gt; codeFright ðŸŽƒ</title>
    <link>https://www.codefright.com/posts/</link>
    <description>Recent content in Posts on &lt;/&gt; codeFright ðŸŽƒ</description>
    <image>
      <title>&lt;/&gt; codeFright ðŸŽƒ</title>
      <url>https://www.codefright.com/static/logo.png</url>
      <link>https://www.codefright.com/static/logo.png</link>
    </image>
    <generator>Hugo -- 0.126.1</generator>
    <language>en-us</language>
    <copyright>2025 codeFright ðŸ‘»</copyright>
    <lastBuildDate>Thu, 16 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.codefright.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>âš¡ Getting Started with Kotlin Multiplatform Mobile</title>
      <link>https://www.codefright.com/posts/kmm-guide/</link>
      <pubDate>Thu, 16 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/kmm-guide/</guid>
      <description>Let&amp;rsquo;s explore how to build your first Kotlin Multiplatform Mobile (KMM) app!
What is Kotlin Multiplatform Mobile? Think of KMM is like a code-sharing wand that lets you write business logic once in Kotlin and use it on both iOS and Android. It&amp;rsquo;s like having a universal translator for your code - write once, run everywhere (well, on mobile at least)!
When you use KMM, you get to:
Share business logic across platforms Keep native UI for the best user experience Reduce duplicate code and potential bugs Speed up development time Setting Up Your Environment First, let&amp;rsquo;s get your development environment ready.</description>
      <content:encoded><![CDATA[<p>Let&rsquo;s explore how to build your first Kotlin Multiplatform Mobile (KMM) app!</p>
<h2 id="what-is-kotlin-multiplatform-mobile">What is Kotlin Multiplatform Mobile?</h2>
<p>Think of KMM is like a code-sharing wand that lets you write business logic once in Kotlin and use it on both iOS and Android. It&rsquo;s like having a universal translator for your code - write once, run everywhere (well, on mobile at least)!</p>
<p>When you use KMM, you get to:</p>
<ul>
<li>Share business logic across platforms</li>
<li>Keep native UI for the best user experience</li>
<li>Reduce duplicate code and potential bugs</li>
<li>Speed up development time</li>
</ul>
<h2 id="setting-up-your-environment">Setting Up Your Environment</h2>
<p>First, let&rsquo;s get your development environment ready. You&rsquo;ll need:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Root build.gradle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">buildscript</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">repositories</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">google</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">mavenCentral</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">dependencies</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">classpath</span><span class="p">(</span><span class="s2">&#34;org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.20&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">classpath</span><span class="p">(</span><span class="s2">&#34;com.android.tools.build:gradle:8.1.0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Your project structure should look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MyKMMProject/
</span></span><span class="line"><span class="cl">â”œâ”€â”€ androidApp/
</span></span><span class="line"><span class="cl">â”œâ”€â”€ iosApp/
</span></span><span class="line"><span class="cl">â””â”€â”€ shared/
</span></span><span class="line"><span class="cl">    â”œâ”€â”€ src/
</span></span><span class="line"><span class="cl">        â”œâ”€â”€ commonMain/
</span></span><span class="line"><span class="cl">        â”œâ”€â”€ androidMain/
</span></span><span class="line"><span class="cl">        â””â”€â”€ iosMain/
</span></span></code></pre></div><h2 id="your-first-shared-code">Your First Shared Code</h2>
<p>Let&rsquo;s start with something simple - a shared data model:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// commonMain/kotlin/com/example/User.kt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">data</span> <span class="k">class</span> <span class="nc">User</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">email</span><span class="p">:</span> <span class="n">String</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>Now, let&rsquo;s add some platform-specific code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// commonMain/kotlin/com/example/Platform.kt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">expect</span> <span class="k">class</span> <span class="nc">Platform</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">platform</span><span class="p">:</span> <span class="n">String</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// androidMain/kotlin/com/example/Platform.kt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">actual</span> <span class="k">class</span> <span class="nc">Platform</span> <span class="k">actual</span> <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">actual</span> <span class="k">val</span> <span class="py">platform</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s2">&#34;Android </span><span class="si">${android.os.Build.VERSION.SDK_INT}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// iosMain/kotlin/com/example/Platform.kt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">actual</span> <span class="k">class</span> <span class="nc">Platform</span> <span class="k">actual</span> <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">actual</span> <span class="k">val</span> <span class="py">platform</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="nc">UIDevice</span><span class="p">.</span><span class="n">currentDevice</span><span class="p">.</span><span class="n">systemName</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="networking-made-easy">Networking Made Easy</h2>
<p>Here&rsquo;s how to set up a shared network layer using Ktor:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ApiClient</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">httpClient</span> <span class="p">=</span> <span class="n">HttpClient</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">install</span><span class="p">(</span><span class="n">ContentNegotiation</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">fetchUser</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">User</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">httpClient</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s2">&#34;https://api.example.com/users/</span><span class="si">$id</span><span class="s2">&#34;</span><span class="p">).</span><span class="n">body</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="platform-specific-ui">Platform-Specific UI</h2>
<h3 id="android-ui">Android UI</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">setContent</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">UserProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">UserProfile</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">user</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">User</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span> <span class="p">=</span> <span class="n">ApiClient</span><span class="p">().</span><span class="n">fetchUser</span><span class="p">(</span><span class="s2">&#34;123&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Column</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="n">user</span><span class="o">?.</span><span class="n">name</span> <span class="o">?:</span> <span class="s2">&#34;Loading...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="n">user</span><span class="o">?.</span><span class="n">email</span> <span class="o">?:</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="ios-ui">iOS UI</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">user</span><span class="p">:</span> <span class="n">User</span><span class="p">?</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">VStack</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Text</span><span class="p">(</span><span class="n">user</span><span class="p">?.</span><span class="n">name</span> <span class="p">??</span> <span class="s">&#34;Loading...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">Text</span><span class="p">(</span><span class="n">user</span><span class="p">?.</span><span class="n">email</span> <span class="p">??</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">onAppear</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ApiClient</span><span class="p">().</span><span class="n">fetchUser</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="s">&#34;123&#34;</span><span class="p">)</span> <span class="p">{</span> <span class="n">fetchedUser</span> <span class="k">in</span>
</span></span><span class="line"><span class="cl">                <span class="n">user</span> <span class="p">=</span> <span class="n">fetchedUser</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="common-pitfalls-to-watch-out-for">Common Pitfalls to Watch Out For</h2>
<ol>
<li><strong>The Threading Trap</strong>: Remember that each platform handles threading differently. Use Dispatchers.Default for shared code:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">UserRepository</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">getUser</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Safe to call from any platform
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">api</span><span class="p">.</span><span class="n">fetchUser</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li><strong>The Memory Maze</strong>: iOS and Android handle memory differently. Use weak references when needed:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// In shared code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">SharedViewModel</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">User</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">state</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="3">
<li><strong>The Platform Puzzle</strong>: Don&rsquo;t access platform-specific APIs in common code:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T do this in commonMain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">getPlatformVersion</span><span class="p">()</span> <span class="p">=</span> <span class="nc">Build</span><span class="p">.</span><span class="nc">VERSION</span><span class="p">.</span><span class="n">SDK_INT</span> <span class="c1">// Won&#39;t work!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// DO this instead
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">expect</span> <span class="k">fun</span> <span class="nf">getPlatformVersion</span><span class="p">():</span> <span class="n">String</span>
</span></span><span class="line"><span class="cl"><span class="k">actual</span> <span class="k">fun</span> <span class="nf">getPlatformVersion</span><span class="p">()</span> <span class="p">=</span> <span class="nc">Build</span><span class="p">.</span><span class="nc">VERSION</span><span class="p">.</span><span class="nc">SDK_INT</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="real-world-example-image-loading">Real-World Example: Image Loading</h2>
<p>Here&rsquo;s a practical example of an image loader that works across platforms:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">interface</span> <span class="nc">ImageLoader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">loadImage</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">ImageBitmap</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AndroidImageLoader</span> <span class="p">:</span> <span class="n">ImageLoader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">loadImage</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">ImageBitmap</span> <span class="p">=</span>
</span></span><span class="line"><span class="cl">        <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">URL</span><span class="p">(</span><span class="n">url</span><span class="p">).</span><span class="n">openStream</span><span class="p">().</span><span class="n">use</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                <span class="nc">BitmapFactory</span><span class="p">.</span><span class="n">decodeStream</span><span class="p">(</span><span class="k">it</span><span class="p">).</span><span class="n">asImageBitmap</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">IosImageLoader</span> <span class="p">:</span> <span class="n">ImageLoader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">loadImage</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">ImageBitmap</span> <span class="p">=</span>
</span></span><span class="line"><span class="cl">        <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">NSUrl</span><span class="p">(</span><span class="n">string</span> <span class="p">=</span> <span class="n">url</span><span class="p">)</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">nsUrl</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nc">NSData</span><span class="p">.</span><span class="n">dataWithContentsOfURL</span><span class="p">(</span><span class="n">nsUrl</span><span class="p">)</span><span class="o">?.</span><span class="n">toUIImage</span><span class="p">()</span><span class="o">?.</span><span class="n">toImageBitmap</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="o">?:</span> <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s2">&#34;Invalid URL&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="testing-your-kmm-code">Testing Your KMM Code</h2>
<p>Here&rsquo;s how to test your shared code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">UserRepositoryTest</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">testFetchUser</span><span class="p">()</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">repository</span> <span class="p">=</span> <span class="n">UserRepository</span><span class="p">(</span><span class="n">mockApi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">getUser</span><span class="p">(</span><span class="s2">&#34;123&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">assertEquals</span><span class="p">(</span><span class="s2">&#34;John Doe&#34;</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>KMM can easily help you reduce your cross-platform app development time and effort by a lot!</p>
<p>Also don&rsquo;t forget to check out the official KMM documentation for more advanced topics.</p>
]]></content:encoded>
    </item>
    <item>
      <title>âš¡ Android Developer Interview Guide</title>
      <link>https://www.codefright.com/posts/interview-guide/</link>
      <pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/interview-guide/</guid>
      <description>This guide is also available as a comprehensive GitHub repository:
Core Android Concepts Activities &amp;amp; Fragments Activity Lifecycle onCreate(): Activity is first created
Initialize UI Set content view Initialize variables onStart(): Activity becomes visible
Prepare UI elements Register broadcast receivers onResume(): Activity starts interacting with user
Start animations/video playback Initialize foreground services onPause(): Activity partially visible but not focused
Pause ongoing operations Save draft data onStop(): Activity no longer visible</description>
      <content:encoded><![CDATA[<p>This guide is also available as a comprehensive GitHub repository:</p>
<p><a href="https://github.com/anugotta/AndroidNotes"><img loading="lazy" src="https://img.shields.io/badge/GitHub-AndroidNotes-brightgreen" alt="Android Notes"  />
</a></p>
<hr>
<h2 id="core-android-concepts">Core Android Concepts</h2>
<h3 id="activities--fragments">Activities &amp; Fragments</h3>
<h4 id="activity-lifecycle">Activity Lifecycle</h4>
<ul>
<li>
<p><code>onCreate()</code>: Activity is first created</p>
<ul>
<li>Initialize UI</li>
<li>Set content view</li>
<li>Initialize variables</li>
</ul>
</li>
<li>
<p><code>onStart()</code>: Activity becomes visible</p>
<ul>
<li>Prepare UI elements</li>
<li>Register broadcast receivers</li>
</ul>
</li>
<li>
<p><code>onResume()</code>: Activity starts interacting with user</p>
<ul>
<li>Start animations/video playback</li>
<li>Initialize foreground services</li>
</ul>
</li>
<li>
<p><code>onPause()</code>: Activity partially visible but not focused</p>
<ul>
<li>Pause ongoing operations</li>
<li>Save draft data</li>
</ul>
</li>
<li>
<p><code>onStop()</code>: Activity no longer visible</p>
<ul>
<li>Save persistent data</li>
<li>Release resources</li>
</ul>
</li>
<li>
<p><code>onDestroy()</code>: Activity being destroyed</p>
<ul>
<li>Cleanup resources</li>
<li>Unregister receivers</li>
</ul>
</li>
</ul>
<p>Common Flows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">Normal Flow:
</span></span><span class="line"><span class="cl">onCreate â†’ onStart â†’ onResume â†’ onPause â†’ onStop â†’ onDestroy
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Background Flow:
</span></span><span class="line"><span class="cl">onStop â†’ onRestart â†’ onStart
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Configuration Change:
</span></span><span class="line"><span class="cl">onPause â†’ onSaveInstanceState â†’ onStop â†’ onDestroy â†’ 
</span></span><span class="line"><span class="cl">onCreate â†’ onStart â†’ onRestoreInstanceState â†’ onResume
</span></span></code></pre></div><h4 id="fragment-lifecycle">Fragment Lifecycle</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">Complete Flow:
</span></span><span class="line"><span class="cl">onAttach â†’ onCreate â†’ onCreateView â†’ onViewCreated â†’ 
</span></span><span class="line"><span class="cl">onActivityCreated â†’ onStart â†’ onResume â†’ onPause â†’ 
</span></span><span class="line"><span class="cl">onStop â†’ onDestroyView â†’ onDestroy â†’ onDetach
</span></span></code></pre></div><p>Key Methods:</p>
<ul>
<li><code>onAttach()</code>: Fragment attached to activity</li>
<li><code>onCreateView()</code>: Create and return view hierarchy</li>
<li><code>onViewCreated()</code>: View setup after creation</li>
<li><code>onDestroyView()</code>: View hierarchy being destroyed</li>
</ul>
<h3 id="services">Services</h3>
<h4 id="types-of-services">Types of Services</h4>
<ol>
<li><strong>Foreground Service</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MusicService</span> <span class="p">:</span> <span class="n">Service</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onStartCommand</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">Intent</span><span class="p">?,</span> <span class="n">flags</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">startId</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">notification</span> <span class="p">=</span> <span class="n">createNotification</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">startForeground</span><span class="p">(</span><span class="n">NOTIFICATION_ID</span><span class="p">,</span> <span class="n">notification</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">START_STICKY</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Background Service</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DataSyncService</span> <span class="p">:</span> <span class="n">Service</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onStartCommand</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">Intent</span><span class="p">?,</span> <span class="n">flags</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">startId</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Perform background operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">START_NOT_STICKY</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="3">
<li><strong>Bound Service</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LocalService</span> <span class="p">:</span> <span class="n">Service</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">binder</span> <span class="p">=</span> <span class="n">LocalBinder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">inner</span> <span class="k">class</span> <span class="nc">LocalBinder</span> <span class="p">:</span> <span class="n">Binder</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">fun</span> <span class="nf">getService</span><span class="p">():</span> <span class="n">LocalService</span> <span class="p">=</span> <span class="k">this</span><span class="nd">@LocalService</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onBind</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">Intent</span><span class="p">):</span> <span class="n">IBinder</span> <span class="p">=</span> <span class="n">binder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="4">
<li><strong>IntentService</strong> (Deprecated, use WorkManager instead)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DataProcessingService</span> <span class="p">:</span> <span class="n">IntentService</span><span class="p">(</span><span class="s2">&#34;DataProcessingService&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onHandleIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">Intent</span><span class="p">?)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Process data in background
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="intents--communication">Intents &amp; Communication</h3>
<h4 id="types-of-intents">Types of Intents</h4>
<ol>
<li><strong>Explicit Intents</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Start specific activity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">intent</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">TargetActivity</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">intent</span><span class="p">.</span><span class="n">putExtra</span><span class="p">(</span><span class="s2">&#34;key&#34;</span><span class="p">,</span> <span class="s2">&#34;value&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">startActivity</span><span class="p">(</span><span class="n">intent</span><span class="p">)</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Implicit Intents</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Open URL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">intent</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">(</span><span class="nc">Intent</span><span class="p">.</span><span class="n">ACTION_VIEW</span><span class="p">,</span> <span class="nc">Uri</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&#34;https://example.com&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">startActivity</span><span class="p">(</span><span class="n">intent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Share text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">shareIntent</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">action</span> <span class="p">=</span> <span class="nc">Intent</span><span class="p">.</span><span class="n">ACTION_SEND</span>
</span></span><span class="line"><span class="cl">    <span class="n">type</span> <span class="p">=</span> <span class="s2">&#34;text/plain&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">putExtra</span><span class="p">(</span><span class="nc">Intent</span><span class="p">.</span><span class="n">EXTRA_TEXT</span><span class="p">,</span> <span class="s2">&#34;Share this&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">startActivity</span><span class="p">(</span><span class="nc">Intent</span><span class="p">.</span><span class="n">createChooser</span><span class="p">(</span><span class="n">shareIntent</span><span class="p">,</span> <span class="s2">&#34;Share via&#34;</span><span class="p">))</span>
</span></span></code></pre></div><h4 id="broadcast-receivers">Broadcast Receivers</h4>
<ol>
<li><strong>Static Receiver</strong> (Manifest-declared)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;receiver</span>
</span></span><span class="line"><span class="cl">    <span class="na">android:name=</span><span class="s">&#34;.MyReceiver&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">android:exported=</span><span class="s">&#34;true&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;intent-filter&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&#34;android.intent.action.BOOT_COMPLETED&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/intent-filter&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/receiver&gt;</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Dynamic Receiver</strong> (Runtime registration)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">private</span> <span class="k">val</span> <span class="py">receiver</span> <span class="p">=</span> <span class="k">object</span> <span class="err">: </span><span class="nc">BroadcastReceiver</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onReceive</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">intent</span><span class="p">:</span> <span class="n">Intent</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Handle broadcast
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onResume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">registerReceiver</span><span class="p">(</span><span class="k">receiver</span><span class="p">,</span> <span class="n">IntentFilter</span><span class="p">(</span><span class="s2">&#34;ACTION_NAME&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onPause</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">unregisterReceiver</span><span class="p">(</span><span class="k">receiver</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="kotlin-fundamentals">Kotlin Fundamentals</h2>
<h3 id="key-features">Key Features</h3>
<h4 id="null-safety">Null Safety</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Nullable types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">var</span> <span class="py">nullableString</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Safe call operator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">nullableString</span><span class="o">?.</span><span class="n">length</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Elvis operator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">length</span> <span class="p">=</span> <span class="n">nullableString</span><span class="o">?.</span><span class="n">length</span> <span class="o">?:</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Not-null assertion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">definiteLength</span> <span class="p">=</span> <span class="n">nullableString</span><span class="o">!!</span><span class="p">.</span><span class="n">length</span> <span class="c1">// Throws if null
</span></span></span></code></pre></div><h4 id="properties">Properties</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Lazy initialization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">expensive</span><span class="p">:</span> <span class="n">String</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Computed only on first access
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">computeExpensiveString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Late initialization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">lateinit</span> <span class="k">var</span> <span class="py">lateinitVar</span><span class="p">:</span> <span class="n">String</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Initialize later
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lateinitVar</span> <span class="p">=</span> <span class="s2">&#34;Now initialized&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Custom getters/setters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">var</span> <span class="py">counter</span> <span class="p">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="k">field</span>
</span></span><span class="line"><span class="cl">    <span class="k">set</span><span class="p">(</span><span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="p">)</span> <span class="k">field</span> <span class="p">=</span> <span class="k">value</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><h2 id="modern-android-development">Modern Android Development</h2>
<h3 id="jetpack-compose">Jetpack Compose</h3>
<h4 id="basic-composables">Basic Composables</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">Greeting</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Column</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s2">&#34;Hello </span><span class="si">$name</span><span class="s2">!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="cm">/* action */</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Click me&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="state-management">State Management</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Local state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">count</span><span class="o">++</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Count: </span><span class="si">$count</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Hoisted state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">StatefulCounter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">onCountChange</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Unit</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onCountChange</span><span class="p">(</span><span class="n">count</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Count: </span><span class="si">$count</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="side-effects">Side Effects</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Run on first composition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Launch coroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Run on every successful composition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SideEffect</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Update non-compose code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Cleanup when leaving composition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">onDispose</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Cleanup
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="navigation-component">Navigation Component</h3>
<h4 id="navigation-graph">Navigation Graph</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;navigation</span> <span class="na">xmlns:android=</span><span class="s">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:app=</span><span class="s">&#34;http://schemas.android.com/apk/res-auto&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">android:id=</span><span class="s">&#34;@+id/nav_graph&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">app:startDestination=</span><span class="s">&#34;@id/homeFragment&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;fragment</span>
</span></span><span class="line"><span class="cl">        <span class="na">android:id=</span><span class="s">&#34;@+id/homeFragment&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">android:name=</span><span class="s">&#34;.HomeFragment&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;action</span>
</span></span><span class="line"><span class="cl">            <span class="na">android:id=</span><span class="s">&#34;@+id/to_detail&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">app:destination=</span><span class="s">&#34;@id/detailFragment&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;argument</span>
</span></span><span class="line"><span class="cl">                <span class="na">android:name=</span><span class="s">&#34;itemId&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="na">app:argType=</span><span class="s">&#34;string&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/action&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/fragment&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;fragment</span>
</span></span><span class="line"><span class="cl">        <span class="na">android:id=</span><span class="s">&#34;@+id/detailFragment&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">android:name=</span><span class="s">&#34;.DetailFragment&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/navigation&gt;</span>
</span></span></code></pre></div><h4 id="navigation-in-code">Navigation in Code</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Using Safe Args
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">HomeFragment</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">navArgs</span><span class="p">:</span> <span class="n">HomeFragmentArgs</span> <span class="k">by</span> <span class="n">navArgs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">navigate</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">action</span> <span class="p">=</span> <span class="nc">HomeFragmentDirections</span><span class="p">.</span><span class="n">toDetail</span><span class="p">(</span><span class="n">itemId</span> <span class="p">=</span> <span class="s2">&#34;123&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">findNavController</span><span class="p">().</span><span class="n">navigate</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="architecture-components">Architecture Components</h2>
<h3 id="mvvm-pattern">MVVM Pattern</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">data</span> <span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ViewModel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">UserViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">_user</span> <span class="p">=</span> <span class="n">MutableLiveData</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">user</span><span class="p">:</span> <span class="n">LiveData</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_user</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">loadUser</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">_user</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">getUser</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// View
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">UserFragment</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">UserViewModel</span> <span class="k">by</span> <span class="n">viewModels</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onViewCreated</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">View</span><span class="p">,</span> <span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onViewCreated</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">savedInstanceState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewModel</span><span class="p">.</span><span class="n">user</span><span class="p">.</span><span class="n">observe</span><span class="p">(</span><span class="n">viewLifecycleOwner</span><span class="p">)</span> <span class="p">{</span> <span class="n">user</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Update UI
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="state-management-1">State Management</h3>
<h4 id="stateflow">StateFlow</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">UserViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">_uiState</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">UiState</span><span class="p">&gt;(</span><span class="nc">UiState</span><span class="p">.</span><span class="n">Initial</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">UiState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">loadData</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">_uiState</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="nc">UiState</span><span class="p">.</span><span class="n">Loading</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">_uiState</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="nc">UiState</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">_uiState</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="nc">UiState</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// States
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">sealed</span> <span class="k">class</span> <span class="nc">UiState</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">object</span> <span class="nc">Initial</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">object</span> <span class="nc">Loading</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">data</span> <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="room-database">Room Database</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Entity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Entity</span><span class="p">(</span><span class="n">tableName</span> <span class="p">=</span> <span class="s2">&#34;users&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">data</span> <span class="k">class</span> <span class="nc">UserEntity</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PrimaryKey</span> <span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">email</span><span class="p">:</span> <span class="n">String</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DAO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Dao</span>
</span></span><span class="line"><span class="cl"><span class="k">interface</span> <span class="nc">UserDao</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Query</span><span class="p">(</span><span class="s2">&#34;SELECT * FROM users&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">getAll</span><span class="p">():</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserEntity</span><span class="p">&gt;&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Insert</span><span class="p">(</span><span class="n">onConflict</span> <span class="p">=</span> <span class="nc">OnConflictStrategy</span><span class="p">.</span><span class="n">REPLACE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">insert</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">UserEntity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Delete</span>
</span></span><span class="line"><span class="cl">    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">delete</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">UserEntity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Database
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Database</span><span class="p">(</span><span class="n">entities</span> <span class="p">=</span> <span class="p">[</span><span class="n">UserEntity</span><span class="o">::</span><span class="k">class</span><span class="p">],</span> <span class="n">version</span> <span class="p">=</span> <span class="m">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AppDatabase</span> <span class="p">:</span> <span class="n">RoomDatabase</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">userDao</span><span class="p">():</span> <span class="n">UserDao</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="dependency-injection-with-hilt">Dependency Injection with Hilt</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Application class
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@HiltAndroidApp</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyApplication</span> <span class="p">:</span> <span class="n">Application</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Module
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Module</span>
</span></span><span class="line"><span class="cl"><span class="nd">@InstallIn</span><span class="p">(</span><span class="n">SingletonComponent</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">object</span> <span class="nc">AppModule</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Provides</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Singleton</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">provideDatabase</span><span class="p">(</span><span class="nd">@ApplicationContext</span> <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">):</span> <span class="n">AppDatabase</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nc">Room</span><span class="p">.</span><span class="n">databaseBuilder</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">AppDatabase</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;app_database&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">).</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ViewModel injection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@HiltViewModel</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MainViewModel</span> <span class="nd">@Inject</span> <span class="k">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">Repository</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Activity injection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@AndroidEntryPoint</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="background-processing">Background Processing</h2>
<h3 id="coroutines">Coroutines</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MainViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Different Coroutine Scopes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ViewModel Scope
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Runs on Main dispatcher by default
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Background work with IO dispatcher
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Network or database operations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// CPU-intensive work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Complex calculations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Parallel Execution
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">loadDataInParallel</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">coroutineScope</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">val</span> <span class="py">result1</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">api</span><span class="p">.</span><span class="n">getData1</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">val</span> <span class="py">result2</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">api</span><span class="p">.</span><span class="n">getData2</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">val</span> <span class="py">combinedResult</span> <span class="p">=</span> <span class="n">result1</span><span class="p">.</span><span class="n">await</span><span class="p">()</span> <span class="p">+</span> <span class="n">result2</span><span class="p">.</span><span class="n">await</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="workmanager">WorkManager</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Define Work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">DataSyncWorker</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">params</span><span class="p">:</span> <span class="n">WorkerParameters</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">:</span> <span class="n">CoroutineWorker</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">doWork</span><span class="p">():</span> <span class="n">Result</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Do background work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nc">Result</span><span class="p">.</span><span class="n">success</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nc">Result</span><span class="p">.</span><span class="n">retry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Schedule Work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Repository</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">scheduleSync</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">constraints</span> <span class="p">=</span> <span class="nc">Constraints</span><span class="p">.</span><span class="n">Builder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">setRequiredNetworkType</span><span class="p">(</span><span class="nc">NetworkType</span><span class="p">.</span><span class="n">CONNECTED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">setRequiresBatteryNotLow</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">syncWork</span> <span class="p">=</span> <span class="n">OneTimeWorkRequestBuilder</span><span class="p">&lt;</span><span class="n">DataSyncWorker</span><span class="p">&gt;()</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">setConstraints</span><span class="p">(</span><span class="n">constraints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">setBackoffCriteria</span><span class="p">(</span><span class="nc">BackoffPolicy</span><span class="p">.</span><span class="n">LINEAR</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="nc">TimeUnit</span><span class="p">.</span><span class="n">MINUTES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nc">WorkManager</span><span class="p">.</span><span class="n">getInstance</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">enqueueUniqueWork</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;sync_work&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nc">ExistingWorkPolicy</span><span class="p">.</span><span class="n">REPLACE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">syncWork</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="rxjava">RxJava</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Basic Observable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nc">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="k">it</span> <span class="p">*</span> <span class="m">2</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="k">it</span> <span class="p">&gt;</span> <span class="m">5</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="k">it</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Network Call with RxJava
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">interface</span> <span class="nc">ApiService</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GET</span><span class="p">(</span><span class="s2">&#34;users&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">getUsers</span><span class="p">():</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Repository</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">getUsers</span><span class="p">():</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">apiService</span><span class="p">.</span><span class="n">getUsers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">subscribeOn</span><span class="p">(</span><span class="nc">Schedulers</span><span class="p">.</span><span class="n">io</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="nc">AndroidSchedulers</span><span class="p">.</span><span class="n">mainThread</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="data-management">Data Management</h2>
<h3 id="secure-data-storage">Secure Data Storage</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Encrypted Shared Preferences
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">masterKey</span> <span class="p">=</span> <span class="nc">MasterKey</span><span class="p">.</span><span class="n">Builder</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">setKeyScheme</span><span class="p">(</span><span class="nc">MasterKey</span><span class="p">.</span><span class="nc">KeyScheme</span><span class="p">.</span><span class="n">AES256_GCM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">val</span> <span class="py">sharedPreferences</span> <span class="p">=</span> <span class="nc">EncryptedSharedPreferences</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;secret_prefs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">masterKey</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nc">EncryptedSharedPreferences</span><span class="p">.</span><span class="nc">PrefKeyEncryptionScheme</span><span class="p">.</span><span class="n">AES256_SIV</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nc">EncryptedSharedPreferences</span><span class="p">.</span><span class="nc">PrefValueEncryptionScheme</span><span class="p">.</span><span class="n">AES256_GCM</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Encrypted Files
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">encryptedFile</span> <span class="p">=</span> <span class="nc">EncryptedFile</span><span class="p">.</span><span class="n">Builder</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">File</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">filesDir</span><span class="p">,</span> <span class="s2">&#34;secret.txt&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">masterKey</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nc">EncryptedFile</span><span class="p">.</span><span class="nc">FileEncryptionScheme</span><span class="p">.</span><span class="n">AES256_GCM_HKDF_4KB</span>
</span></span><span class="line"><span class="cl"><span class="p">).</span><span class="n">build</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="network-security">Network Security</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Certificate Pinning with OkHttp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">certificatePinner</span> <span class="p">=</span> <span class="nc">CertificatePinner</span><span class="p">.</span><span class="n">Builder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&#34;example.com&#34;</span><span class="p">,</span> <span class="s2">&#34;sha256/XXXX=&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">val</span> <span class="py">okHttpClient</span> <span class="p">=</span> <span class="nc">OkHttpClient</span><span class="p">.</span><span class="n">Builder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">certificatePinner</span><span class="p">(</span><span class="n">certificatePinner</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Retrofit with Security
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">val</span> <span class="py">retrofit</span> <span class="p">=</span> <span class="nc">Retrofit</span><span class="p">.</span><span class="n">Builder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">baseUrl</span><span class="p">(</span><span class="s2">&#34;https://api.example.com/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="n">okHttpClient</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">addConverterFactory</span><span class="p">(</span><span class="nc">GsonConverterFactory</span><span class="p">.</span><span class="n">create</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="testing">Testing</h2>
<h3 id="unit-testing">Unit Testing</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Test</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">`test user validation`</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">validator</span> <span class="p">=</span> <span class="n">UserValidator</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">assertTrue</span><span class="p">(</span><span class="n">validator</span><span class="p">.</span><span class="n">isValidEmail</span><span class="p">(</span><span class="s2">&#34;test@example.com&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">assertFalse</span><span class="p">(</span><span class="n">validator</span><span class="p">.</span><span class="n">isValidEmail</span><span class="p">(</span><span class="s2">&#34;invalid-email&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ViewModel Testing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Test</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">`test loading state`</span><span class="p">()</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">repository</span> <span class="p">=</span> <span class="n">mockk</span><span class="p">&lt;</span><span class="n">Repository</span><span class="p">&gt;()</span>
</span></span><span class="line"><span class="cl">    <span class="n">coEvery</span> <span class="p">{</span> <span class="n">repository</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span> <span class="p">}</span> <span class="n">returns</span> <span class="nc">Result</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="k">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">viewModel</span> <span class="p">=</span> <span class="n">MainViewModel</span><span class="p">(</span><span class="n">repository</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">viewModel</span><span class="p">.</span><span class="n">loadData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">assertEquals</span><span class="p">(</span><span class="nc">UiState</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="k">data</span><span class="p">),</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="k">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="ui-testing-with-espresso">UI Testing with Espresso</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Test</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">testLoginFlow</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Launch activity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nc">ActivityScenario</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">LoginActivity</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Type text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">onView</span><span class="p">(</span><span class="n">withId</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">emailInput</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">perform</span><span class="p">(</span><span class="n">typeText</span><span class="p">(</span><span class="s2">&#34;test@example.com&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Click button
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">onView</span><span class="p">(</span><span class="n">withId</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">loginButton</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">perform</span><span class="p">(</span><span class="n">click</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Verify text
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">onView</span><span class="p">(</span><span class="n">withId</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">statusText</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">check</span><span class="p">(</span><span class="n">matches</span><span class="p">(</span><span class="n">withText</span><span class="p">(</span><span class="s2">&#34;Success&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="compose-ui-testing">Compose UI Testing</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Test</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">testCounter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">composeTestRule</span><span class="p">.</span><span class="n">setContent</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Counter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">composeTestRule</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">onNodeWithText</span><span class="p">(</span><span class="s2">&#34;Count: 0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">assertExists</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">performClick</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">composeTestRule</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">onNodeWithText</span><span class="p">(</span><span class="s2">&#34;Count: 1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">assertExists</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="performance-optimization">Performance Optimization</h2>
<h3 id="memory-management">Memory Management</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Avoid memory leaks with weak references
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">private</span> <span class="k">val</span> <span class="py">weakReference</span> <span class="p">=</span> <span class="n">WeakReference</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Proper bitmap handling
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">loadBitmap</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">options</span> <span class="p">=</span> <span class="nc">BitmapFactory</span><span class="p">.</span><span class="n">Options</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">inJustDecodeBounds</span> <span class="p">=</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nc">BitmapFactory</span><span class="p">.</span><span class="n">decodeResource</span><span class="p">(</span><span class="n">resources</span><span class="p">,</span> <span class="nc">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">image</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">options</span><span class="p">.</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">inSampleSize</span> <span class="p">=</span> <span class="n">calculateInSampleSize</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">reqWidth</span><span class="p">,</span> <span class="n">reqHeight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">inJustDecodeBounds</span> <span class="p">=</span> <span class="k">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Memory Cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">ImageCache</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">memoryCache</span> <span class="p">=</span> <span class="k">object</span> <span class="err">: </span><span class="nc">LruCache</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">Bitmap</span><span class="p">&gt;(</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nc">Runtime</span><span class="p">.</span><span class="n">getRuntime</span><span class="p">().</span><span class="n">maxMemory</span><span class="p">()</span> <span class="p">/</span> <span class="m">1024</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span> <span class="p">/</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">override</span> <span class="k">fun</span> <span class="nf">sizeOf</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">bitmap</span><span class="p">:</span> <span class="n">Bitmap</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">byteCount</span> <span class="p">/</span> <span class="m">1024</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="build--deployment">Build &amp; Deployment</h2>
<h3 id="gradle-configuration">Gradle Configuration</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="c1">// App level build.gradle.kts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span><span class="o">(</span><span class="s2">&#34;com.android.application&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span><span class="o">(</span><span class="s2">&#34;kotlin-android&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span><span class="o">(</span><span class="s2">&#34;kotlin-kapt&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span><span class="o">(</span><span class="s2">&#34;dagger.hilt.android.plugin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">android</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">defaultConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">applicationId</span> <span class="o">=</span> <span class="s2">&#34;com.example.app&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">minSdk</span> <span class="o">=</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl">        <span class="n">targetSdk</span> <span class="o">=</span> <span class="mi">34</span>
</span></span><span class="line"><span class="cl">        <span class="n">versionCode</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">versionName</span> <span class="o">=</span> <span class="s2">&#34;1.0.0&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">buildTypes</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">release</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">isMinifyEnabled</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">            <span class="n">proguardFiles</span><span class="o">(</span><span class="n">getDefaultProguardFile</span><span class="o">(</span><span class="s2">&#34;proguard-android.txt&#34;</span><span class="o">),</span> <span class="s2">&#34;proguard-rules.pro&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">debug</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">applicationIdSuffix</span> <span class="o">=</span> <span class="s2">&#34;.debug&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">isDebuggable</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">buildFeatures</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">compose</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewBinding</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="apk-vs-app-bundle">APK vs App Bundle</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// App Bundle benefits:
</span></span></span><span class="line"><span class="cl"><span class="c1">// 1. Smaller download size
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2. Dynamic feature delivery
</span></span></span><span class="line"><span class="cl"><span class="c1">// 3. Optimized for different devices
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Configure dynamic feature
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">android</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">dynamicFeatures</span> <span class="p">=</span> <span class="n">mutableSetOf</span><span class="p">(</span><span class="s2">&#34;:feature_module&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Install dynamic feature
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">fun</span> <span class="nf">installFeature</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">request</span> <span class="p">=</span> <span class="nc">SplitInstallRequest</span><span class="p">.</span><span class="n">newBuilder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">addModule</span><span class="p">(</span><span class="s2">&#34;feature_module&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">splitInstallManager</span><span class="p">.</span><span class="n">startInstall</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">addOnSuccessListener</span> <span class="p">{</span> <span class="cm">/* Handle success */</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">addOnFailureListener</span> <span class="p">{</span> <span class="cm">/* Handle failure */</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="cicd-pipeline">CI/CD Pipeline</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Example GitHub Actions workflow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Android CI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="l">main ]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="l">main ]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Set up JDK</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-java@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">java-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;11&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Run Tests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">./gradlew test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Debug APK</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">./gradlew assembleDebug</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload APK</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">app-debug</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">app/build/outputs/apk/debug/app-debug.apk</span><span class="w">
</span></span></span></code></pre></div><h2 id="data-structures--algorithms">Data Structures &amp; Algorithms</h2>
<h3 id="common-interview-problems">Common Interview Problems</h3>
<h4 id="1-string-manipulation">1. String Manipulation</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Reverse String
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">reverseString</span><span class="p">(</span><span class="n">str</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">String</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">reversed</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Or manual implementation:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">toCharArray</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">apply</span> <span class="p">{</span> <span class="n">reverse</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">joinToString</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Check Palindrome
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="n">str</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">cleanStr</span> <span class="p">=</span> <span class="n">str</span><span class="p">.</span><span class="n">lowercase</span><span class="p">().</span><span class="n">filter</span> <span class="p">{</span> <span class="k">it</span><span class="p">.</span><span class="n">isLetterOrDigit</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cleanStr</span> <span class="o">==</span> <span class="n">cleanStr</span><span class="p">.</span><span class="n">reversed</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="2-array-operations">2. Array Operations</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Find Missing Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">findMissingNumber</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="n">IntArray</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">n</span> <span class="p">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span> <span class="p">+</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">expectedSum</span> <span class="p">=</span> <span class="p">(</span><span class="n">n</span> <span class="p">*</span> <span class="p">(</span><span class="n">n</span> <span class="p">+</span> <span class="m">1</span><span class="p">))</span> <span class="p">/</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">actualSum</span> <span class="p">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">expectedSum</span> <span class="p">-</span> <span class="n">actualSum</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Maximum Subarray Sum
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">maxSubArraySum</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="n">IntArray</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">maxSoFar</span> <span class="p">=</span> <span class="n">arr</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">maxEndingHere</span> <span class="p">=</span> <span class="n">arr</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span> <span class="n">until</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">maxEndingHere</span> <span class="p">=</span> <span class="n">maxOf</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">maxEndingHere</span> <span class="p">+</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">maxSoFar</span> <span class="p">=</span> <span class="n">maxOf</span><span class="p">(</span><span class="n">maxSoFar</span><span class="p">,</span> <span class="n">maxEndingHere</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">maxSoFar</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="3-linked-list-operations">3. Linked List Operations</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">data</span> <span class="k">class</span> <span class="nc">ListNode</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">next</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Reverse Linked List
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">reverseList</span><span class="p">(</span><span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">?):</span> <span class="n">ListNode</span><span class="p">?</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">prev</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">current</span> <span class="p">=</span> <span class="n">head</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">current</span> <span class="o">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">next</span> <span class="p">=</span> <span class="n">current</span><span class="p">.</span><span class="n">next</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span><span class="p">.</span><span class="n">next</span> <span class="p">=</span> <span class="n">prev</span>
</span></span><span class="line"><span class="cl">        <span class="n">prev</span> <span class="p">=</span> <span class="n">current</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span> <span class="p">=</span> <span class="n">next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">prev</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Detect Cycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">hasCycle</span><span class="p">(</span><span class="n">head</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">?):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">slow</span> <span class="p">=</span> <span class="n">head</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">fast</span> <span class="p">=</span> <span class="n">head</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">fast</span><span class="o">?.</span><span class="n">next</span> <span class="o">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow</span> <span class="p">=</span> <span class="n">slow</span><span class="o">?.</span><span class="n">next</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="p">=</span> <span class="n">fast</span><span class="p">.</span><span class="n">next</span><span class="o">?.</span><span class="n">next</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">slow</span> <span class="o">==</span> <span class="n">fast</span><span class="p">)</span> <span class="k">return</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="android-specific-optimizations">Android-Specific Optimizations</h3>
<h4 id="1-view-hierarchy-optimization">1. View Hierarchy Optimization</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Flatten view hierarchy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">&lt;</span><span class="n">merge</span> <span class="n">xmlns</span><span class="p">:</span><span class="n">android</span><span class="p">=</span><span class="s2">&#34;http://schemas.android.com/apk/res/android&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;!</span><span class="o">--</span> <span class="n">Child</span> <span class="n">views</span> <span class="o">--</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="n">merge</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Use ConstraintLayout for complex layouts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">&lt;</span><span class="n">androidx</span><span class="p">.</span><span class="n">constraintlayout</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">ConstraintLayout</span>
</span></span><span class="line"><span class="cl">    <span class="n">android</span><span class="p">:</span><span class="n">layout_width</span><span class="p">=</span><span class="s2">&#34;match_parent&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">android</span><span class="p">:</span><span class="n">layout_height</span><span class="p">=</span><span class="s2">&#34;match_parent&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;!</span><span class="o">--</span> <span class="n">Constraints</span> <span class="n">reduce</span> <span class="n">nesting</span> <span class="o">--</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="n">androidx</span><span class="p">.</span><span class="n">constraintlayout</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">ConstraintLayout</span><span class="p">&gt;</span>
</span></span></code></pre></div><h4 id="2-recyclerview-optimization">2. RecyclerView Optimization</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">OptimizedAdapter</span> <span class="p">:</span> <span class="nc">RecyclerView</span><span class="p">.</span><span class="n">Adapter</span><span class="p">&lt;</span><span class="n">ViewHolder</span><span class="p">&gt;()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Implement DiffUtil
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">private</span> <span class="k">val</span> <span class="py">diffCallback</span> <span class="p">=</span> <span class="k">object</span> <span class="err">: </span><span class="nc">DiffUtil</span><span class="p">.</span><span class="n">ItemCallback</span><span class="p">&lt;</span><span class="n">Item</span><span class="p">&gt;()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">override</span> <span class="k">fun</span> <span class="nf">areItemsTheSame</span><span class="p">(</span><span class="n">oldItem</span><span class="p">:</span> <span class="n">Item</span><span class="p">,</span> <span class="n">newItem</span><span class="p">:</span> <span class="n">Item</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">oldItem</span><span class="p">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">newItem</span><span class="p">.</span><span class="n">id</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">override</span> <span class="k">fun</span> <span class="nf">areContentsTheSame</span><span class="p">(</span><span class="n">oldItem</span><span class="p">:</span> <span class="n">Item</span><span class="p">,</span> <span class="n">newItem</span><span class="p">:</span> <span class="n">Item</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">oldItem</span> <span class="o">==</span> <span class="n">newItem</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Use ListAdapter for automatic diff
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">class</span> <span class="nc">EfficientAdapter</span> <span class="p">:</span> <span class="n">ListAdapter</span><span class="p">&lt;</span><span class="n">Item</span><span class="p">,</span> <span class="n">ViewHolder</span><span class="p">&gt;(</span><span class="n">diffCallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// View pool for shared ViewHolders
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setHasStableIds</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">recyclerView</span><span class="p">.</span><span class="n">setRecycledViewPool</span><span class="p">(</span><span class="n">viewPool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="best-practices--tips">Best Practices &amp; Tips</h2>
<h3 id="code-quality">Code Quality</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Use meaningful names
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fun</span> <span class="nf">processUserData</span><span class="p">()</span> <span class="n">instead</span> <span class="n">of</span> <span class="k">fun</span> <span class="nf">process</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Single Responsibility Principle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">UserRepository</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">getUser</span><span class="p">()</span> <span class="c1">// Only user-related operations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Dependency Injection over direct instantiation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="nd">@Inject</span> <span class="k">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">Repository</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Error Handling
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">sealed</span> <span class="k">class</span> <span class="nc">Result</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">:</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span></span><span class="line"><span class="cl">    <span class="k">data</span> <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">exception</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">:</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">Nothing</span><span class="p">&gt;()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="security-best-practices">Security Best Practices</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Secure data storage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">private</span> <span class="k">fun</span> <span class="nf">storeSecurely</span><span class="p">(</span><span class="k">data</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">encryptedData</span> <span class="p">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="k">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">securePreferences</span><span class="p">.</span><span class="n">edit</span><span class="p">().</span><span class="n">putString</span><span class="p">(</span><span class="s2">&#34;key&#34;</span><span class="p">,</span> <span class="n">encryptedData</span><span class="p">).</span><span class="n">apply</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Network security
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">private</span> <span class="k">fun</span> <span class="nf">configureNetworkSecurity</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Force HTTPS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">android</span><span class="p">:</span><span class="n">usesCleartextTraffic</span><span class="p">=</span><span class="s2">&#34;false&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Certificate pinning
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">val</span> <span class="py">certificatePinner</span> <span class="p">=</span> <span class="nc">CertificatePinner</span><span class="p">.</span><span class="n">Builder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&#34;example.com&#34;</span><span class="p">,</span> <span class="s2">&#34;sha256/XXXX=&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="performance-tips">Performance Tips</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Lazy loading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">private</span> <span class="k">val</span> <span class="py">expensiveObject</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Created only when first accessed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ExpensiveObject</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Efficient image loading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">private</span> <span class="k">fun</span> <span class="nf">loadImageEfficiently</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nc">Glide</span><span class="p">.</span><span class="n">with</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">transition</span><span class="p">(</span><span class="nc">DrawableTransitionOptions</span><span class="p">.</span><span class="n">withCrossFade</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">diskCacheStrategy</span><span class="p">(</span><span class="nc">DiskCacheStrategy</span><span class="p">.</span><span class="n">ALL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">into</span><span class="p">(</span><span class="n">imageView</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="additional-resources">Additional Resources</h2>
<ul>
<li>Keep up with <a href="https://android-developers.googleblog.com/">Android Developers Blog</a></li>
<li>Follow <a href="https://developer.android.com/dev-summit">Android Dev Summit</a></li>
<li>Practice with <a href="https://codelabs.developers.google.com/?cat=Android">Android Code Labs</a></li>
<li>Read official <a href="https://material.io/design">Material Design Guidelines</a></li>
<li>Join Android development communities on Reddit and Stack Overflow</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>âš¡ Lets Explore Jetpack Compose!</title>
      <link>https://www.codefright.com/posts/jetpack-compose/</link>
      <pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/jetpack-compose/</guid>
      <description>Hey! Let&amp;rsquo;s explore Jetpack Compose and see how it makes Android UI development more enjoyable.
What is Jetpack Compose? Compose is just a different way to build your app&amp;rsquo;s UI. Instead of writing XML layouts and then manipulating them with code, you write Kotlin functions that describe your UI. It&amp;rsquo;s that simple.
Getting Started First, add these to your build.gradle:
dependencies { implementation &amp;#34;androidx.compose.ui:ui:1.5.4&amp;#34; implementation &amp;#34;androidx.compose.material:material:1.5.4&amp;#34; implementation &amp;#34;androidx.compose.ui:ui-tooling-preview:1.5.4&amp;#34; } Your First Composable Let&amp;rsquo;s write something simple:</description>
      <content:encoded><![CDATA[<p>Hey! Let&rsquo;s explore Jetpack Compose and see how it makes Android UI development more enjoyable.</p>
<h2 id="what-is-jetpack-compose">What is Jetpack Compose?</h2>
<p>Compose is just a different way to build your app&rsquo;s UI. Instead of writing XML layouts and then manipulating them with code, you write Kotlin functions that describe your UI. It&rsquo;s that simple.</p>
<h2 id="getting-started">Getting Started</h2>
<p>First, add these to your <code>build.gradle</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;androidx.compose.ui:ui:1.5.4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;androidx.compose.material:material:1.5.4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;androidx.compose.ui:ui-tooling-preview:1.5.4&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="your-first-composable">Your First Composable</h2>
<p>Let&rsquo;s write something simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">WelcomeText</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Hey </span><span class="si">$name</span><span class="s2">, welcome to Compose!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>That&rsquo;s it! The <code>@Composable</code> annotation tells Compose that this function outputs UI elements. You can use it like any regular Kotlin function.</p>
<h2 id="state-making-things-interactive">State: Making Things Interactive</h2>
<p>State in Compose is just data that can change over time. When it changes, Compose updates your UI automatically:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">Counter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">var</span> <span class="py">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;You clicked </span><span class="si">$count</span><span class="s2"> times&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">count</span><span class="o">++</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Text</span><span class="p">(</span><span class="s2">&#34;Click me&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="modifiers-styling-your-ui">Modifiers: Styling Your UI</h2>
<p>Modifiers are like CSS for your composables. They let you change how things look and behave:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">StyledButton</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Unit</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Button</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">48.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="common-gotchas-to-watch-out-for">Common Gotchas to Watch Out For</h2>
<ol>
<li><strong>State Reset</strong>: Don&rsquo;t declare state outside composable functions:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T do this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">var</span> <span class="py">count</span> <span class="p">=</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c1">// Will reset on recomposition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// DO this instead
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">var</span> <span class="py">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Wrong Thread</strong>: UI updates must happen on the main thread:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T do this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">key1</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// UI updates here will crash
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO this instead
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">key1</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Do background work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Update UI on main thread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="real-world-example-a-user-card">Real World Example: A User Card</h2>
<p>Here&rsquo;s how you might build a user profile card:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@Composable</span>
</span></span><span class="line"><span class="cl"><span class="k">fun</span> <span class="nf">UserCard</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Card</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Row</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Avatar
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">AsyncImage</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">model</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">contentDescription</span> <span class="p">=</span> <span class="s2">&#34;Profile picture&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">CircleShape</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="n">Spacer</span><span class="p">(</span><span class="nc">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">// User info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Column</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">text</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">subtitle1</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">Text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">text</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">body2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">onSurface</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.6f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="why-use-compose">Why Use Compose?</h2>
<ol>
<li><strong>Less Code</strong>: No more XML layouts or view binding</li>
<li><strong>Preview Support</strong>: See your UI changes instantly in Android Studio</li>
<li><strong>Reusable Components</strong>: Easy to create and share UI components</li>
<li><strong>State Management</strong>: Automatic UI updates when data changes</li>
</ol>
<h2 id="useful-tips">Useful Tips</h2>
<ol>
<li>Break down large composables into smaller ones</li>
<li>Use previews for quick iteration</li>
<li>Keep state at the appropriate level</li>
<li>Use appropriate scopes for side effects</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>Compose might feel different at first, but it makes UI development much more straightforward once you get used to it. Start with small components, understand how state works, and you&rsquo;ll be building complex UIs in no time.</p>
<p>Don&rsquo;t forget to check out my other articles!</p>
]]></content:encoded>
    </item>
    <item>
      <title>âš¡ Guide to Custom Views in Android</title>
      <link>https://www.codefright.com/posts/custom-views/</link>
      <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/custom-views/</guid>
      <description>Remember that time you needed a widget that Android doesn&amp;rsquo;t provide out of the box? Maybe a circular progress bar that looks like a pizza being eaten? Well, grab your favorite beverage, because we&amp;rsquo;re about to dive into the world of custom views!
Why Create Custom Views? Sometimes the standard Android widgets just don&amp;rsquo;t cut it. Maybe you need:
A special animation effect A unique user interaction That perfect design your UI/UX team dreamed up The Basics: Anatomy of a Custom View Here&amp;rsquo;s a simple custom view that draws a circle that changes color when touched:</description>
      <content:encoded><![CDATA[<p>Remember that time you needed a widget that Android doesn&rsquo;t provide out of the box? Maybe a circular progress bar that looks like a pizza being eaten? Well, grab your favorite beverage, because we&rsquo;re about to dive into the world of custom views!</p>
<h2 id="why-create-custom-views">Why Create Custom Views?</h2>
<p>Sometimes the standard Android widgets just don&rsquo;t cut it. Maybe you need:</p>
<ul>
<li>A special animation effect</li>
<li>A unique user interaction</li>
<li>That perfect design your UI/UX team dreamed up</li>
</ul>
<h2 id="the-basics-anatomy-of-a-custom-view">The Basics: Anatomy of a Custom View</h2>
<p>Here&rsquo;s a simple custom view that draws a circle that changes color when touched:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ColorChangeCircleView</span> <span class="nd">@JvmOverloads</span> <span class="k">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">attrs</span><span class="p">:</span> <span class="n">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">defStyleAttr</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">:</span> <span class="n">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">,</span> <span class="n">defStyleAttr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">(</span><span class="nc">Paint</span><span class="p">.</span><span class="n">ANTI_ALIAS_FLAG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">var</span> <span class="py">currentColor</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">BLUE</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Enable touch events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">isClickable</span> <span class="p">=</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Get the center and radius
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">val</span> <span class="py">centerX</span> <span class="p">=</span> <span class="n">width</span> <span class="p">/</span> <span class="m">2f</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">centerY</span> <span class="p">=</span> <span class="n">height</span> <span class="p">/</span> <span class="m">2f</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">radius</span> <span class="p">=</span> <span class="n">min</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="m">3f</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Draw the circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">currentColor</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">(</span><span class="n">centerX</span><span class="p">,</span> <span class="n">centerY</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">when</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nc">MotionEvent</span><span class="p">.</span><span class="n">ACTION_DOWN</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Change color randomly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">currentColor</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">rgb</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="nc">Random</span><span class="p">.</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="nc">Random</span><span class="p">.</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="nc">Random</span><span class="p">.</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">invalidate</span><span class="p">()</span> <span class="c1">// Redraw the view
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="n">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="understanding-the-view-lifecycle">Understanding the View Lifecycle</h2>
<h3 id="measurement-and-layout">Measurement and Layout</h3>
<p>The view lifecycle is crucial for proper rendering. Here&rsquo;s how to handle measurement and layout:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onMeasure</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Calculate the ideal size of the view based on content
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">val</span> <span class="py">desiredWidth</span> <span class="p">=</span> <span class="n">suggestedMinimumWidth</span> <span class="p">+</span> <span class="n">paddingLeft</span> <span class="p">+</span> <span class="n">paddingRight</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">desiredHeight</span> <span class="p">=</span> <span class="n">suggestedMinimumHeight</span> <span class="p">+</span> <span class="n">paddingTop</span> <span class="p">+</span> <span class="n">paddingBottom</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Reconcile size with any constraints from the parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">val</span> <span class="py">finalWidth</span> <span class="p">=</span> <span class="n">resolveSize</span><span class="p">(</span><span class="n">desiredWidth</span><span class="p">,</span> <span class="n">widthMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">finalHeight</span> <span class="p">=</span> <span class="n">resolveSize</span><span class="p">(</span><span class="n">desiredHeight</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Must call this to save the measurements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">setMeasuredDimension</span><span class="p">(</span><span class="n">finalWidth</span><span class="p">,</span> <span class="n">finalHeight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSizeChanged</span><span class="p">(</span><span class="n">w</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">h</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">oldw</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">oldh</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onSizeChanged</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">oldw</span><span class="p">,</span> <span class="n">oldh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Update size-dependent calculations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">circleRadius</span> <span class="p">=</span> <span class="n">min</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="p">/</span> <span class="m">3f</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Update drawing bounds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">paddingLeft</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="n">paddingTop</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">w</span> <span class="p">-</span> <span class="n">paddingRight</span><span class="p">).</span><span class="n">toFloat</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">h</span> <span class="p">-</span> <span class="n">paddingBottom</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="state-management">State Management</h3>
<p>Always handle configuration changes and state restoration:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">():</span> <span class="n">Parcelable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">superState</span> <span class="p">=</span> <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">putParcelable</span><span class="p">(</span><span class="s2">&#34;superState&#34;</span><span class="p">,</span> <span class="n">superState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putInt</span><span class="p">(</span><span class="s2">&#34;currentColor&#34;</span><span class="p">,</span> <span class="n">currentColor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onRestoreInstanceState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">Parcelable</span><span class="p">?)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">bundle</span> <span class="p">=</span> <span class="n">state</span> <span class="k">as</span> <span class="n">Bundle</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onRestoreInstanceState</span><span class="p">(</span><span class="n">bundle</span><span class="p">.</span><span class="n">getParcelable</span><span class="p">(</span><span class="s2">&#34;superState&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentColor</span> <span class="p">=</span> <span class="n">bundle</span><span class="p">.</span><span class="n">getInt</span><span class="p">(</span><span class="s2">&#34;currentColor&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">invalidate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="making-it-configurable">Making It Configurable</h2>
<p>Let&rsquo;s make our view configurable through XML with various attribute types:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;resources&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&#34;ColorChangeCircleView&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;circleRadius&#34;</span> <span class="na">format=</span><span class="s">&#34;dimension&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;defaultColor&#34;</span> <span class="na">format=</span><span class="s">&#34;color&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;shapeStyle&#34;</span> <span class="na">format=</span><span class="s">&#34;enum&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&#34;filled&#34;</span> <span class="na">value=</span><span class="s">&#34;0&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&#34;stroke&#34;</span> <span class="na">value=</span><span class="s">&#34;1&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/attr&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;strokeWidth&#34;</span> <span class="na">format=</span><span class="s">&#34;dimension&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&#34;enableAnimation&#34;</span> <span class="na">format=</span><span class="s">&#34;boolean&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/declare-styleable&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/resources&gt;</span>
</span></span></code></pre></div><p>And the corresponding Kotlin implementation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">.</span><span class="n">theme</span><span class="p">.</span><span class="n">obtainStyledAttributes</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">attrs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="m">0</span><span class="p">,</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">circleRadius</span> <span class="p">=</span> <span class="n">getDimension</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_circleRadius</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">resources</span><span class="p">.</span><span class="n">getDimension</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">dimen</span><span class="p">.</span><span class="n">default_radius</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">defaultColor</span> <span class="p">=</span> <span class="n">getColor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_defaultColor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nc">Color</span><span class="p">.</span><span class="n">BLUE</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shapeStyle</span> <span class="p">=</span> <span class="n">getInt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_shapeStyle</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">SHAPE_STYLE_FILLED</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">strokeWidth</span> <span class="p">=</span> <span class="n">getDimension</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_strokeWidth</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">resources</span><span class="p">.</span><span class="n">getDimension</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">dimen</span><span class="p">.</span><span class="n">default_stroke_width</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">enableAnimation</span> <span class="p">=</span> <span class="n">getBoolean</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nc">R</span><span class="p">.</span><span class="n">styleable</span><span class="p">.</span><span class="n">ColorChangeCircleView_enableAnimation</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="k">false</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">recycle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentColor</span> <span class="p">=</span> <span class="n">defaultColor</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="advanced-touch-handling">Advanced Touch Handling</h2>
<p>Implement sophisticated touch interactions using GestureDetector:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ColorChangeCircleView</span> <span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">gestureDetector</span> <span class="p">=</span> <span class="n">GestureDetectorCompat</span><span class="p">(</span><span class="n">context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">object</span> <span class="err">: </span><span class="nc">GestureDetector</span><span class="p">.</span><span class="n">SimpleOnGestureListener</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDown</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSingleTapUp</span><span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">changeColor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFling</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">e1</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">?,</span> <span class="n">e2</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">velocityX</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">velocityY</span><span class="p">:</span> <span class="n">Float</span>
</span></span><span class="line"><span class="cl">            <span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">startSpinAnimation</span><span class="p">(</span><span class="n">velocityX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">MotionEvent</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">gestureDetector</span><span class="p">.</span><span class="n">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span><span class="p">.</span><span class="n">onTouchEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="animation-integration">Animation Integration</h2>
<p>Add smooth animations to your custom view:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">private</span> <span class="k">fun</span> <span class="nf">startColorAnimation</span><span class="p">(</span><span class="n">newColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nc">ValueAnimator</span><span class="p">.</span><span class="n">ofArgb</span><span class="p">(</span><span class="n">currentColor</span><span class="p">,</span> <span class="n">newColor</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">duration</span> <span class="p">=</span> <span class="m">300</span>
</span></span><span class="line"><span class="cl">        <span class="n">interpolator</span> <span class="p">=</span> <span class="n">FastOutSlowInInterpolator</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">addUpdateListener</span> <span class="p">{</span> <span class="n">animator</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="n">currentColor</span> <span class="p">=</span> <span class="n">animator</span><span class="p">.</span><span class="n">animatedValue</span> <span class="k">as</span> <span class="n">Int</span>
</span></span><span class="line"><span class="cl">            <span class="n">invalidate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">start</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="accessibility-considerations">Accessibility Considerations</h2>
<p>Make your custom view accessible to all users:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Set content description
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">contentDescription</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">color_circle_description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Enable accessibility events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">importantForAccessibility</span> <span class="p">=</span> <span class="n">IMPORTANT_FOR_ACCESSIBILITY_YES</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onInitializeAccessibilityNodeInfo</span><span class="p">(</span><span class="n">info</span><span class="p">:</span> <span class="n">AccessibilityNodeInfo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onInitializeAccessibilityNodeInfo</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">.</span><span class="n">className</span> <span class="p">=</span> <span class="n">Button</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">.</span><span class="n">name</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">.</span><span class="n">isClickable</span> <span class="p">=</span> <span class="k">true</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">.</span><span class="n">addAction</span><span class="p">(</span><span class="nc">AccessibilityNodeInfo</span><span class="p">.</span><span class="n">ACTION_CLICK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="performance-tips">Performance Tips</h2>
<ol>
<li><strong>Avoid Object Creation in onDraw()</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// BAD
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">()</span> <span class="c1">// Don&#39;t do this!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">canvas</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">(</span><span class="o">..</span><span class="p">.)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// GOOD
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">private</span> <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">()</span> <span class="c1">// Create once in initialization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">canvas</span><span class="p">.</span><span class="n">drawCircle</span><span class="p">(</span><span class="o">..</span><span class="p">.)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Use Hardware Acceleration</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">android:hardwareAccelerated=&#34;true&#34;
</span></span></code></pre></div><ol start="3">
<li><strong>Optimize Invalidation</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// Only invalidate the necessary area
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">invalidate</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">bottom</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Use post for thread-safe invalidation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">postInvalidate</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="debugging-tips">Debugging Tips</h2>
<ol>
<li>Debug draw mode:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nc">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">style</span> <span class="p">=</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">Style</span><span class="p">.</span><span class="n">STROKE</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">RED</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawRect</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li>Log measurements:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onMeasure</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">super</span><span class="p">.</span><span class="n">onMeasure</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nc">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">widthMode</span> <span class="p">=</span> <span class="nc">MeasureSpec</span><span class="p">.</span><span class="n">getMode</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">widthSize</span> <span class="p">=</span> <span class="nc">MeasureSpec</span><span class="p">.</span><span class="n">getSize</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s2">&#34;Width Mode: </span><span class="si">${getModeString(widthMode)}</span><span class="s2">, Size: </span><span class="si">$widthSize</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="testing-custom-views">Testing Custom Views</h2>
<p>Here&rsquo;s a basic test setup:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="nd">@RunWith</span><span class="p">(</span><span class="n">AndroidJUnit4</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ColorChangeCircleViewTest</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">lateinit</span> <span class="k">var</span> <span class="py">view</span><span class="p">:</span> <span class="n">ColorChangeCircleView</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Before</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">view</span> <span class="p">=</span> <span class="n">ColorChangeCircleView</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nc">InstrumentationRegistry</span><span class="p">.</span><span class="n">getInstrumentation</span><span class="p">().</span><span class="n">targetContext</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">testColorChange</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">initialColor</span> <span class="p">=</span> <span class="n">view</span><span class="p">.</span><span class="n">getCurrentColor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">view</span><span class="p">.</span><span class="n">performClick</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">assertNotEquals</span><span class="p">(</span><span class="n">initialColor</span><span class="p">,</span> <span class="n">view</span><span class="p">.</span><span class="n">getCurrentColor</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="a-real-world-example-custom-progress-view">A Real-World Example: Custom Progress View</h2>
<p>Here&rsquo;s a more practical example - a custom progress view that fills up like a battery:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BatteryProgressView</span> <span class="nd">@JvmOverloads</span> <span class="k">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">attrs</span><span class="p">:</span> <span class="n">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">defStyleAttr</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">:</span> <span class="n">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">,</span> <span class="n">defStyleAttr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">var</span> <span class="py">progress</span> <span class="p">=</span> <span class="m">0f</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">paint</span> <span class="p">=</span> <span class="n">Paint</span><span class="p">(</span><span class="nc">Paint</span><span class="p">.</span><span class="n">ANTI_ALIAS_FLAG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">val</span> <span class="py">rect</span> <span class="p">=</span> <span class="n">RectF</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">setProgress</span><span class="p">(</span><span class="k">value</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">progress</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">100f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">invalidate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="n">Canvas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Draw battery outline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paint</span><span class="p">.</span><span class="n">style</span> <span class="p">=</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">Style</span><span class="p">.</span><span class="n">STROKE</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="nc">Color</span><span class="p">.</span><span class="n">GRAY</span>
</span></span><span class="line"><span class="cl">        <span class="n">rect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawRect</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Draw battery level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paint</span><span class="p">.</span><span class="n">style</span> <span class="p">=</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">Style</span><span class="p">.</span><span class="n">FILL</span>
</span></span><span class="line"><span class="cl">        <span class="n">paint</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="k">when</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">progress</span> <span class="p">&lt;</span> <span class="m">20f</span> <span class="o">-&gt;</span> <span class="nc">Color</span><span class="p">.</span><span class="n">RED</span>
</span></span><span class="line"><span class="cl">            <span class="n">progress</span> <span class="p">&lt;</span> <span class="m">50f</span> <span class="o">-&gt;</span> <span class="nc">Color</span><span class="p">.</span><span class="n">YELLOW</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="o">-&gt;</span> <span class="nc">Color</span><span class="p">.</span><span class="n">GREEN</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">levelWidth</span> <span class="p">=</span> <span class="p">(</span><span class="n">width</span> <span class="p">*</span> <span class="p">(</span><span class="n">progress</span> <span class="p">/</span> <span class="m">100f</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">rect</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">levelWidth</span><span class="p">,</span> <span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">canvas</span><span class="p">.</span><span class="n">drawRect</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="n">paint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="resources-for-further-learning">Resources for Further Learning</h2>
<ul>
<li><a href="https://developer.android.com/develop/ui/views/layout/custom-views/create-view">Android Developer Documentation on Custom Views</a></li>
<li><a href="https://source.android.com/devices/graphics/architecture">Android Graphics Architecture</a></li>
<li><a href="https://material.io/design">Material Design Guidelines</a></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Custom views are like cooking - start with the basic recipe, then add your own flavors!</p>
<p>Stay tuned for more Android development articles!</p>
]]></content:encoded>
    </item>
    <item>
      <title>âš¡ Kotlin Coroutines for the Beginners</title>
      <link>https://www.codefright.com/posts/kotlin-coroutines/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://www.codefright.com/posts/kotlin-coroutines/</guid>
      <description>Hey! Lets explore Kotlin Coroutines in this post.
What Are Coroutines? Think of coroutines as tiny workers in your code who can pause their work, go grab a coffee, and come back exactly where they left off. Unlike regular functions that must run to completion, coroutines can take breaks without blocking the main thread.
When a coroutine &amp;ldquo;takes a break,&amp;rdquo; it&amp;rsquo;s typically doing one of several things:
Waiting for I/O operations to complete (like reading from a file or making a network request) Yielding control to allow other coroutines to run Waiting for a timer or delay to expire Waiting for data from another coroutine or for some condition to be met The key point is that during these &amp;ldquo;breaks,&amp;rdquo; the coroutine isn&amp;rsquo;t actually consuming CPU resources.</description>
      <content:encoded><![CDATA[<p>Hey! Lets explore Kotlin Coroutines in this post.</p>
<h2 id="what-are-coroutines">What Are Coroutines?</h2>
<p>Think of coroutines as tiny workers in your code who can pause their work, go grab a coffee, and come back exactly where they left off. Unlike regular functions that must run to completion, coroutines can take breaks without blocking the main thread.</p>
<p>When a coroutine &ldquo;takes a break,&rdquo; it&rsquo;s typically doing one of several things:</p>
<ul>
<li>Waiting for I/O operations to complete (like reading from a file or making a network request)</li>
<li>Yielding control to allow other coroutines to run</li>
<li>Waiting for a timer or delay to expire</li>
<li>Waiting for data from another coroutine or for some condition to be met</li>
</ul>
<p>The key point is that during these &ldquo;breaks,&rdquo; the coroutine isn&rsquo;t actually consuming CPU resources. Instead, it&rsquo;s in a suspended state, and the program can do other useful work.</p>
<h2 id="getting-started">Getting Started</h2>
<p>First, you&rsquo;ll need to add the coroutines dependency to your <code>build.gradle</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="the-basics-your-first-coroutine">The Basics: Your First Coroutine</h2>
<p>Let&rsquo;s start with something simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Launch a coroutine in the lifecycle scope
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// This is suspended code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span> <span class="c1">// Wait for 1 second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s2">&#34;Coroutines&#34;</span><span class="p">,</span> <span class="s2">&#34;Hello from the future!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="understanding-dispatchers-where-your-coroutines-run">Understanding Dispatchers: Where Your Coroutines Run</h2>
<p>Think of dispatchers as different workspaces for your coroutines. Just like how you wouldn&rsquo;t do heavy lifting in a library or read a book at a gym, different coroutines need different environments:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">suspend</span> <span class="k">fun</span> <span class="nf">showHowDispatchersWork</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// For CPU-intensive tasks (like sorting lists, parsing JSON)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">hugelist</span> <span class="p">=</span> <span class="p">(</span><span class="m">1.</span><span class="p">.</span><span class="m">1000000</span><span class="p">).</span><span class="n">toList</span><span class="p">().</span><span class="n">shuffled</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">hugelist</span><span class="p">.</span><span class="n">sorted</span><span class="p">()</span> <span class="c1">// Heavy computation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// For network/disk operations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Reading files, making API calls
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="s2">&#34;https://api.example.com&#34;</span><span class="p">).</span><span class="n">readText</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// For UI updates
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">binding</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s2">&#34;Updated!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="coroutine-builders-different-ways-to-launch">Coroutine Builders: Different Ways to Launch</h2>
<p>Coroutines come with different &ldquo;builders&rdquo; - think of them as different tools for different jobs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CoroutineDemo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">showDifferentBuilders</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Fire and forget
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s2">&#34;Demo&#34;</span><span class="p">,</span> <span class="s2">&#34;This just runs!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Returns a result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">val</span> <span class="py">deferred</span> <span class="p">=</span> <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Hello from async!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// runBlocking - Mainly for testing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">runBlocking</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">deferred</span><span class="p">.</span><span class="n">await</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nc">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s2">&#34;Demo&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="coroutine-scopes-the-parent-child-relationship">Coroutine Scopes: The Parent-Child Relationship</h2>
<p>Coroutines have a family tree. Each coroutine has a parent, and when the parent is cancelled, all its children are cancelled too. It&rsquo;s like a really responsible family:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">init</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span> <span class="c1">// Parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">launch</span> <span class="p">{</span> <span class="c1">// Child 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// Some work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">launch</span> <span class="p">{</span> <span class="c1">// Child 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// More work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="the-benefits-of-coroutines">The Benefits of Coroutines</h2>
<p>Why should you fall in love with coroutines? Here&rsquo;s why:</p>
<ol>
<li>
<p><strong>They&rsquo;re Light as a Feather</strong>: While threads might take 1MB+ of memory, coroutines only need a few bytes. You can run thousands of them without breaking a sweat!</p>
</li>
<li>
<p><strong>Structured Concurrency</strong>: Coroutines are organized in a way that makes error handling and cancellation much more predictable. When a parent coroutine is cancelled, all its children are automatically cancelled too:</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">userInfo</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">fetchUserInfo</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">val</span> <span class="py">userPosts</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">fetchUserPosts</span><span class="p">()</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Wait for both results
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">displayUserProfile</span><span class="p">(</span><span class="n">userInfo</span><span class="p">.</span><span class="n">await</span><span class="p">(),</span> <span class="n">userPosts</span><span class="p">.</span><span class="n">await</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Handles errors from both operations!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">showError</span><span class="p">(</span><span class="s2">&#34;Oops, something went wrong!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="3">
<li><strong>Sequential by Default</strong>: Writing async code that looks like sync code is a superpower:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// The old way (callbacks)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">fetchUserData</span> <span class="p">{</span> <span class="n">user</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fetchUserPosts</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span> <span class="n">posts</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="n">fetchPostComments</span><span class="p">(</span><span class="n">posts</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span> <span class="n">comments</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Welcome to callback hell!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// The coroutine way
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">fetchUserData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">posts</span> <span class="p">=</span> <span class="n">fetchUserPosts</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">comments</span> <span class="p">=</span> <span class="n">fetchPostComments</span><span class="p">(</span><span class="n">posts</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Clean and simple!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="watch-out-for-these">Watch Out For These!</h2>
<p>Here are some common pitfalls to watch out for:</p>
<ol>
<li>
<p><strong>The Infinite Coroutine</strong>: Don&rsquo;t forget to cancel your coroutines! It could result in memory leaks.</p>
</li>
<li>
<p><strong>Wrong Context</strong>: Running network calls on the main thread is like trying to juggle while riding a unicycle.</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T DO THIS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Heavy network operation 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">api</span><span class="p">.</span><span class="n">fetchLargeData</span><span class="p">()</span> <span class="c1">// App freezes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO THIS INSTEAD
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Heavy network operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">api</span><span class="p">.</span><span class="n">fetchLargeData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Update UI safely
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">showData</span><span class="p">(</span><span class="k">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="3">
<li><strong>The Scope Mixup</strong>: Using the wrong scope can lead to memory leaks or crashes:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T: Using GlobalScope is like using a global variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nc">GlobalScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// This might outlive your activity!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO: Use structured concurrency
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// This gets cancelled when your activity does
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><ol start="4">
<li><strong>The Context Switch Confusion</strong>:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">fetchData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">binding</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="k">data</span> <span class="c1">// Crash! Can&#39;t touch UI here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">Main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">binding</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="k">data</span> <span class="c1">// This is the way
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="5">
<li><strong>The Exception Escape</strong>: Coroutines can be sneaky with exceptions:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="c1">// DON&#39;T: Silent failure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s2">&#34;Boom!&#34;</span><span class="p">)</span> <span class="c1">// Gets swallowed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DO: Handle your exceptions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s2">&#34;Boom!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nc">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s2">&#34;Error&#34;</span><span class="p">,</span> <span class="s2">&#34;Something went wrong&#34;</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">showErrorToUser</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="real-world-examples">Real-World Examples</h2>
<h3 id="image-loading">Image Loading</h3>
<p>Here&rsquo;s a practical example of using coroutines for loading images:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ImageLoader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">fun</span> <span class="nf">loadImage</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">imageView</span><span class="p">:</span> <span class="n">ImageView</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Launch in the Main scope but switch to IO for network
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">val</span> <span class="py">bitmap</span> <span class="p">=</span> <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">URL</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">).</span><span class="n">openStream</span><span class="p">().</span><span class="n">use</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                        <span class="nc">BitmapFactory</span><span class="p">.</span><span class="n">decodeStream</span><span class="p">(</span><span class="k">it</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Back on Main thread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">imageView</span><span class="p">.</span><span class="n">setImageBitmap</span><span class="p">(</span><span class="n">bitmap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Handle error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="nc">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s2">&#34;ImageLoader&#34;</span><span class="p">,</span> <span class="s2">&#34;Failed to load image&#34;</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="building-a-cachenetwork-data-fetcher">Building a Cache+Network Data Fetcher</h3>
<p>Let&rsquo;s see how coroutines shine in a real-world scenario:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DataRepository</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">fetchUserData</span><span class="p">(</span><span class="n">userId</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">User</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Try cache first
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">val</span> <span class="py">cachedUser</span> <span class="p">=</span> <span class="n">database</span><span class="p">.</span><span class="n">getUser</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">cachedUser</span><span class="p">.</span><span class="n">isUpToDate</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span><span class="nd">@withContext</span> <span class="n">cachedUser</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c1">// Cache miss or outdated, fetch from network
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">val</span> <span class="py">freshUser</span> <span class="p">=</span> <span class="n">api</span><span class="p">.</span><span class="n">fetchUser</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c1">// Update cache in the background
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">launch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">database</span><span class="p">.</span><span class="n">saveUser</span><span class="p">(</span><span class="n">freshUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="n">freshUser</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// If everything fails, at least try to return cached data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">database</span><span class="p">.</span><span class="n">getUser</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span> <span class="o">?:</span> <span class="k">throw</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Understanding Coroutines might seem difficult at first, but once you get the hang of them, you&rsquo;ll wonder how you ever lived without them. They provide a powerful way to handle asynchronous operations with clean, readable code that&rsquo;s efficient and maintainable.</p>
<p>Don&rsquo;t forget to checkout my other articles!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
